#!/usr/bin/env vpython3
# Copyright 2019 The LUCI Authors. All rights reserved.
# Use of this source code is governed under the Apache License, Version 2.0
# that can be found in the LICENSE file.

"""Automatically updates the .proto files in this directory.

This is not necessarily used for all proto files in this directory;
but should update those listed in SUB_PATHS.
"""

import json
import os
import re
import subprocess
import tarfile

from pathlib import Path

import requests

BASE_URL = 'https://chromium.googlesource.com/infra/turboci/proto'
LOG_URL = BASE_URL+'/+log/main/%s?format=JSON&n=1'
TAR_URL = BASE_URL+'/+archive/%s/%s.tar.gz'

REPO_PATH = 'turboci'

def print_commit_message(prev_commit: str, target: str):
  print('{0:=^80}'.format(' START[Commit Message] '))
  print('[TurboCI] Import latest protos.')
  print()
  changelog = f'{BASE_URL}/+log/{prev_commit}..{target}'
  print(f'Changelog: {changelog}')
  print()
  clog = json.loads(requests.get(changelog+"?format=JSON").text[4:])
  for commit in clog['log']:
    first_line = commit["message"].split("\n")[0]
    print(f'{commit["commit"][:8]} {first_line}')
  print()
  print('{0:=^80}'.format(' END[Commit Message] '))

def main():
  """Automatically updates the .proto files in this directory."""
  base_dir = Path(__file__).parent

  readme_path = base_dir / 'README.md'

  with open(readme_path, 'r') as rmd:
    prev_commit = re.match(r'.*/([a-f0-9]{40})/.*', rmd.read(), re.MULTILINE|re.DOTALL).group(1)

  to_remove = set()
  for root, _, files in os.walk(base_dir):
    for file in files:
      if file.endswith('.proto'):
        to_remove.add(Path(root) / file)

  resp = requests.get(LOG_URL % (REPO_PATH,))
  target = str(json.loads(resp.text[4:])['log'][0]['commit'])

  if prev_commit == target:
    print('Nothing to update.')
    return

  print(f'Updating to {target!r}')

  resp = requests.get(TAR_URL % (target, REPO_PATH), stream=True).raw
  with tarfile.open(mode='r|*', fileobj=resp) as tar:
    for item in tar:
      if item.name.endswith('_test.proto'):
        print(f'Skipping {item.name!r}')
        continue
      if 'internal' in item.name or 'googleapis' in item.name:
        print(f'Skipping {item.name!r}')
        continue
      if item.name.endswith('.proto'):
        print(f'Extracting {item.name!r}')
        tar.extract(item, path=base_dir)
        to_remove.discard(base_dir / item.name)

  if to_remove:
    print('Removing stale proto')
    for file in to_remove:
      os.remove(file)

  with open(readme_path, 'w') as rmd:
    print('// Generated by update.py. DO NOT EDIT.', file=rmd)
    print('These protos were copied from:', file=rmd)
    print(f'{BASE_URL}/+/{target}/{REPO_PATH}', file=rmd)

  print_commit_message(prev_commit, target)

  print('Done.')


if __name__ == '__main__':
  main()
