// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package turboci.graph.orchestrator.v1;

import "turboci/graph/ids/v1/identifier.proto";
import "turboci/graph/orchestrator/v1/check_view.proto";
import "turboci/graph/orchestrator/v1/revision.proto";
import "turboci/graph/orchestrator/v1/stage_view.proto";

option go_package = "go.chromium.org/turboci/proto/go/graph/orchestrator/v1;orchestratorpb";
option java_multiple_files = true;

// GraphView provides a collated, partial, view of the graph.
//
// Nodes may be omitted from the GraphView under the following conditions:
// - The caller does not have permission to view the node.
// - The caller only requested a subset of possible nodes (e.g. via query/filter
// parameters)
// - The caller only requested a subset of the possible data types (e.g. Check
// options)
//
// However, every node (specifically, anything which can be named with an
// Identifier) present in the GraphView is complete, and consistent with its
// included Revision. This means that this can contain e.g. dependency edges to
// nodes which are not present in this GraphView, and possibly not readable by
// the caller at all.
//
// As an example, if a `Check` is present in this GraphView, you are seeing the
// entire contents of that Check, but MAY NOT see all the `Datum` objects which
// belong to this Check (but you WOULD see the full content of the Check.options
// field).
message GraphView {
  // When a GraphView is returned from a read operation (e.g. QueryNodes), it
  // will be the version of the snapshot of the graph used to prepare this
  // GraphView.
  optional Revision version = 1;

  // The WorkPlan to which all nodes in this GraphView belong.
  optional ids.v1.WorkPlan identifier = 2;

  // Checks in the graph, addressed by `check.identifier.id`.
  //
  // Checks may be omitted if the user does not have permission to view them,
  // or if the user did not request them.
  map<string, CheckView> checks = 3;

  // Stages in the graph, addressed by `stage.identifier.id`.
  //
  // Note that for the same reason ids.v1.Stage.id contains the 'S' or 'N'
  // prefix, that prefix appears in the key here as well.
  //
  // Stages may be omitted if the user does not have permission to view them,
  // or if the user did not request them.
  map<string, StageView> stages = 4;
}
