// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package turboci.graph.orchestrator.v1;

import "turboci/graph/orchestrator/v1/edge.proto";

option go_package = "go.chromium.org/turboci/proto/go/graph/orchestrator/v1;orchestratorpb";
option java_multiple_files = true;

// EdgeGroup represents a collection of edges and/or sub-groups.
//
// The number of edges/groups needed to resolve this EdgeGroup is dictated by
// `threshold` - with an unset threshold, this will require all edges and
// sub-groups to be resolved. With a threshold of 1, any edge or sub-group will
// resolve this EdgeGroup, etc.
message EdgeGroup {
  // Singular edges in this group.
  //
  // This is kept ordered by edges[].target.id.
  // There can only be one edge per target.id in this list.
  repeated Edge edges = 1;
  // Sub-groups in this group.
  repeated EdgeGroup groups = 2;

  // If unset, all `edges` and `groups` must be resolved for this EdgeGroup to
  // be resolved (effectively 'AND' of edges and groups).
  //
  // If set, indicates the number of edges and groups needed to resolve this
  // EdgeGroup. For example, if this EdgeGroup is
  //
  //     { edges: [a, b, c], groups: [GROUP], threshold: 2}
  //
  // Then this EdgeGroup could be resolved on the first of any:
  //   * a b
  //   * b c
  //   * a c
  //   * a GROUP
  //   * b GROUP
  //   * c GROUP
  //
  // Setting this to `1` effectively means 'the first resolved entry in
  // edges or groups resolves this group' (effectively making this an OR).
  //
  // A value greater than one could be useful if you want to depend on the first
  // N of multiple possible edges.
  //
  // A zero or negative threshold will be normalized to `unset`.
  optional int32 threshold = 3;

  // A bubbling up of the resolution from the child edges of this group. Used to
  // easily identify which branch of the edge tree was resolved.
  //
  // Once `resolution` is set, `edges` and `groups` are frozen (so to see which
  // Edge objects caused this group to be resolved, recurse into edges and
  // groups). This is true even if after `resolution.at` some additional edges
  // became resolved. If you want to see if any of these extra edges were
  // resolved, you can just directly query for them at the time you want to
  // check for them.
  //
  // This can be set with `satisfied = false` if the Orchestrator can prove that
  // no additional evolution of `edges` and `groups` could satisfy this
  // EdgeGroup. For example, if `threshold` is set to 5 and this EdgeGroup has 5
  // entries, one of which is marked as `satisfied = false`, then we know this
  // EdgeGroup must also be unsatisfiable.
  optional Edge.Resolution resolution = 4;
}
