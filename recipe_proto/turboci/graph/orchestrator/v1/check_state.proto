// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package turboci.graph.orchestrator.v1;

option go_package = "go.chromium.org/turboci/proto/go/graph/orchestrator/v1;orchestratorpb";
option java_multiple_files = true;

// NOTE - This is CheckState with prefixed enum values instead of Check.State
// so that field_options.proto can import this without making a circular import
// with check.proto.

// CheckState describes the current state of a Check.
//
// This state always evolves in order:
//   1. PLANNING
//   2. PLANNED
//   3. WAITING
//   4. FINAL
//
// The Workflow (i.e. a Stage) can explicitly evolve a Check from one state to
// the next, but the Orchestrator will also enforce Check state evolution via
// Stage Check Assignment "goal states". When all Stages with Check Assignments
// for a given goal_state are Final, if the Check is not explicitly advanced to
// (or past) that goal state, the Orchestrator will advance the check state.
//
// These states have enum values in multiples of 10 in case we need to add more
// states later which fall between these 4 initial states.
enum CheckState {
  // UNKNOWN is the default, invalid, state.
  CHECK_STATE_UNKNOWN = 0;

  // PLANNING indicates that the workflow is still editing this Check.
  //
  // Checks are added to the graph in the PLANNING state.
  //
  // While in the PLANNING state, options and dependencies may be edited, as
  // indicated by the `(turboci_check).mutable = PLANNING` field annotation.
  CHECK_STATE_PLANNING = 10;

  // PLANNED indicates that the workflow has finished planning this Check,
  // but one or more dependencies of the Check are still unfulfilled.
  //
  // While in the PLANNED state, the Check is immutable, aside from the
  // resolution of its dependencies.
  CHECK_STATE_PLANNED = 20;

  // WAITING indicates that the workflow has finished planning this Check,
  // and it is unblocked (dependencies have been sufficiently fulfilled),
  // but the Check does not yet have a complete set of Results.
  //
  // While in the WAITING state, the Check may have Results added to it.
  CHECK_STATE_WAITING = 30;

  // FINAL indicates that this Check is fully immutable.
  //
  // When a workflow completes, all of its Checks are FINAL.
  //
  // While in the FINAL state, the Check is fully immutable.
  CHECK_STATE_FINAL = 40;
}
