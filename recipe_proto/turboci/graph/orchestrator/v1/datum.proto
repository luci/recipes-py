// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package turboci.graph.orchestrator.v1;

import "google/api/field_behavior.proto";
import "turboci/graph/ids/v1/identifier.proto";
import "turboci/graph/orchestrator/v1/field_options.proto";
import "turboci/graph/orchestrator/v1/revision.proto";
import "turboci/graph/orchestrator/v1/value.proto";

option go_package = "go.chromium.org/turboci/proto/go/graph/orchestrator/v1;orchestratorpb";
option java_multiple_files = true;

// Datum is a simple wrapper around an `Any`.
//
// The wrapper currently provides a way for stages in the workflow to control
// data accessibility by mapping a realm to each Datum.
//
// We anticipate that in the future we will want to allow the writer of a Datum
// to include additional indexable values to allow clients of TurboCI to e.g.
// search for Checks whose options contain "type" with some specific value.
message Datum {
  // The identifier of this Datum.
  //
  // This is used to map the Datum to the appropriate object (e.g. CheckOption,
  // CheckResult, etc.).
  optional ids.v1.Identifier identifier = 1 [
    (turboci).id.allowed = IDENTIFIER_KIND_CHECK_OPTION,
    (turboci).id.allowed = IDENTIFIER_KIND_CHECK_RESULT_DATUM,
    (turboci).id.allowed = IDENTIFIER_KIND_CHECK_EDIT_OPTION
  ];

  // Maps this datum to a security realm.
  //
  // If omitted, this Datum inherits the realm of the object that it belongs to
  // (i.e. Check or Check Result).
  optional string realm = 2 [(google.api.field_behavior) = IMMUTABLE];

  // The version of this Datum in the database.
  optional Revision version = 3;

  // The actual value of this Datum.
  //
  // The TurboCI orchestrator requires that the type_url of the `value` here be
  // [pre-registered](TBD). This registration ensures that:
  //   * The proto type URL is known to the service frontend (otherwise the
  //     service frontend will reject the type).
  //   * The type is compatible in the context of this Datum (i.e. within
  //     a Check or Check.Result of a certain Kind).
  //
  // Once a type is registered, however, the Orchestrator service will not
  // require the content to be conformant to its registered type. That is
  // - Workflows may run with newer versions of the type definition for a given
  // registered type. This allows rapid prototyping of workflows without the
  // need to land and deploy schema changes ahead of time.
  //
  // The `type_url` of this value is immutable.
  optional Value value = 4;

  // TBD: An additional disambiguator/key in addition to value.type_url?

  // TBD: Orchestrator-visible index values.
}
