// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package turboci.graph.orchestrator.v1;

import "turboci/graph/ids/v1/identifier.proto";
import "turboci/graph/orchestrator/v1/check_state.proto";
import "turboci/graph/orchestrator/v1/stage_state.proto";

option go_package = "go.chromium.org/turboci/proto/go/graph/orchestrator/v1;orchestratorpb";
option java_multiple_files = true;

// A determiniation of the resolution of an Edge.
//
// An Edge is resolved when it gets to `on_state`. Its expression is evaluated,
// and the resolution will be either true (RESOLUTION_SATISFIED) or
// false (RESOLUTION_UNSATISFIED).
enum Resolution {
  // There is not yet enough data in the target of the Edge to determine if it
  // is satisfied or not.
  RESOLUTION_UNKNOWN = 0;

  // The target of the Edge satisfied its condition.
  RESOLUTION_SATISFIED = 1;

  // The target of the Edge did not satisfy its condition.
  RESOLUTION_UNSATISFIED = 2;
}

// Edge is a singular pointer to some node with an Identifier.
//
// Typically Edges must always point to nodes in the same graph, though this may
// be lifted in the future.
message Edge {
  // An edge pointing to a Check.
  message Check {
    // The Check that this edge points to.
    optional ids.v1.Check identifier = 1;

    // The condition under which this Edge is satisfied.
    message Condition {
      // Resolve the expression as soon as the target reaches this state.
      //
      // Defaults to CHECK_STATE_FINAL.
      optional CheckState on_state = 1;

      // A boolean CEL expression to evaluate on the target node when it reaches
      // `on_state`.
      //
      // NOTE: Currently only "true" is supported.
      //
      // This expression may only consider data in the target which is immutable
      // for `on_state`. TBD: Link to reference of how to write these
      // expressions.
      //
      // Defaults to "true".
      optional string expression = 2;
    }
    // The optional condition.
    //
    // If omitted, defaults to:
    //
    //   * on_state: FINAL
    //   * expression: "true"
    //
    // This means 'the edge is satisfied as soon as the check is FINAL'.
    optional Condition condition = 2;
  }

  // An edge pointing to a Stage.
  message Stage {
    // The Stage that this edge points to.
    optional ids.v1.Stage identifier = 1;

    // The condition under which this Edge is satisfied.
    message Condition {
      // Resolve the expression as soon as the target reaches this state.
      //
      // Defaults to STAGE_STATE_FINAL.
      optional StageState on_state = 1;

      // A boolean CEL expression to evaluate on the target node when it reaches
      // `on_state`.
      //
      // NOTE: Currently only "true" is supported.
      //
      // This expression may only consider data in the target which is immutable
      // for `on_state`. TBD: Link to reference of how to write these
      // expressions.
      //
      // Defaults to "true".
      optional string expression = 2;
    }
    // The optional condition.
    //
    // If omitted, defaults to:
    //
    //   * on_state: STAGE_STATE_FINAL
    //   * expression: "true"
    //
    // This means 'the edge is satisfied as soon as the stage is FINAL'.
    optional Condition condition = 2;
  }

  // Required: The target of this Edge.
  //
  // Currently only supports Checks and Stages.
  oneof target {
    // This Edge points to a Check.
    Check check = 1;

    // This Edge points to a Stage.
    Stage stage = 2;
  }
}
