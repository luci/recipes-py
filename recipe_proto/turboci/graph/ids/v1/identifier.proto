// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package turboci.graph.ids.v1;

import "google/protobuf/timestamp.proto";

option go_package = "go.chromium.org/turboci/proto/go/graph/ids/v1;idspb";
option java_multiple_files = true;

// A generic identifier that can be used to identify all TurboCI graph nodes.
//
// Within some message (e.g. Check), you may see usage of Identifier.X directly
// to indicate that the Identifier there can only be a single kind. Having the
// Identifier container, however, allows for generic structures like Edge which
// can refer to multiple kinds of nodes in different contexts.
//
// No string identifiers here may contain a colon.
message Identifier {
  // The type of this Identifier.
  //
  // This should be kept in sync with the `IdentifierKind` enum.
  oneof type {
    // A whole WorkPlan.
    WorkPlan work_plan = 1;

    // A Check within a WorkPlan.
    Check check = 2;
    // Option data for a Check.
    CheckOption check_option = 3;
    // A particular Check.Result.
    CheckResult check_result = 4;
    // Data associated with a particular result in a Check.
    CheckResultDatum check_result_datum = 5;
    // An edit to a Check.
    CheckEdit check_edit = 6;
    // Option data for an edit to a Check.
    CheckEditOption check_edit_option = 7;

    // A Stage within a WorkPlan.
    Stage stage = 8;
    // A specific attempt at a Stage.
    StageAttempt stage_attempt = 9;
    // An edit to a Stage.
    StageEdit stage_edit = 10;
  }
}

// Identifies an entire TurboCI WorkPlan.
//
// Serialized as JUST "<id>", but this must start with "L".
//
// The portion of `id` after "L" will be an integer.
message WorkPlan {
  // Globally unique identifier for this WorkPlan.
  //
  // Has the form "L<digits>" and is generated by the TurboCI service.
  optional string id = 1;
}

// Identifies a Check within a WorkPlan.
//
// Serialized as "<work_plan>:C<id>".
//
// E.g. "<work_plan.id>:C<id>"
message Check {
  // The WorkPlan this check is scoped to.
  optional WorkPlan work_plan = 1;

  // An opaque identifier unique within this WorkPlan.
  //
  // Provided by the Stage which added this Check.
  //
  // TBD: Specify the format of this ID as regex - it should have a maximum
  // length and not be allowed to contain a colon at the very least.
  optional string id = 2;
}

// Identifies an option associated with a Check within a WorkPlan.
//
// Serializes as "<check>:O<idx>".
//
// E.g. "<check.work_plan.id>:C<check.id>:O<idx>"
//
// A CheckOption is a single `Datum`.
//
// This is separate from `Check` because it may reside in a different realm
// than the Check itself.
message CheckOption {
  // The check that this option belongs to.
  optional Check check = 1;

  // The 1-based index of this datum within the Check.options list.
  //
  // This is 1-based to distinguish it from 0/unset (which is invalid).
  optional int32 idx = 2;
}

// Identifies a Check Result within a WorkPlan.
//
// Serialized as "<check>:R<results_idx>".
//
// E.g. "<check.work_plan.id>:C<check.id>:R<idx>"
//
// This is separate from `Check` because it may reside in a different realm
// than the Check itself.
message CheckResult {
  // The check that this result belongs to.
  optional Check check = 1;

  // The 1-based index of this result within the Check.results list.
  //
  // This is 1-based to distinguish it from 0/unset (which is invalid).
  optional int32 idx = 2;
}

// Identifies a Datum for a Check's Result within a WorkPlan.
//
// Serialized as "<result>:D<results_data_idx>".
//
// E.g. "<result.check.work_plan.id>:C<result.check.id>:R<result.idx>:D<idx>"
//
// This is separate from `Check` because it may reside in a different realm
// than the Check itself.
message CheckResultDatum {
  // The check resunt that this datum belongs to.
  optional CheckResult result = 1;

  // The 1-based index of this datum within the Check.Result.data list.
  //
  // This is 1-based to distinguish it from 0/unset (which is invalid).
  optional int32 idx = 2;
}

// Identifies a CheckEdit within a WorkPlan.
//
// Serialized as "<check>:E<version>".
//
// E.g.
// "L<check.work_plan.id>:C<check.id>:ET<version.ts.seconds>/<version.ts.nanos>"
message CheckEdit {
  // The check that this edit belongs to.
  optional Check check = 1;

  // The version of the Check at the time this edit was made.
  optional google.protobuf.Timestamp version = 2;
}

// Identifies a CheckEditOption within a WorkPlan.
//
// Serialized as "<check_edit>:D<idx>".
//
// E.g.
// "L<check_edit.check.work_plan.id>:C<check_edit.check.id>:ET<check_edit.version.ts.seconds>/<check_edit.version.ts.nanos>:D<idx>"
//
// This is separate from `CheckEdit` because it may reside in a different
// realm than the CheckEdit itself.
message CheckEditOption {
  // The check that this edit belongs to.
  optional CheckEdit check_edit = 1;

  // The 1-based index of this datum within the Edit.check.delta.options
  // list.
  //
  // This is 1-based to distinguish it from 0/unset (which is invalid).
  optional int32 check_delta_options_idx = 2;
}

// Identifies a Stage within a WorkPlan.
//
// <id> MUST start with either "S" or "N".
//
// N-flavored Stages have additional synchronization with the WorkNodes
// table. These will have digits following the `N` prefix.
//
// S-flavored Stages don't have any special treatment and do not have a
// restricted suffix after the `S` prefix (other than the usual prohibition of
// the use of colons).
//
// Serialized as "<work_plan>:<id>" (note lack of prefix before <id>).
//
// E.g. "L<work_plan.id>:<id>"
//
// We considered adding a boolean like `is_worknode` to indicate the
// underlying nature of this Stage, but felt that it would lead to more
// complexity at callsites, because it would allow some invalid expressions
// like:
//   * `{work_plan: ..., id: "123"}` referring to a WorkNode.
//   * `{work_plan: ..., is_worknode: true, id: "abc"}` referring to a Stage.
//
// Instead, the N/S prefix is part of the `id` field - but this means that
// Identifier.Stage is unsatisfyingly unlike Identifier.Check. The main
// difference is that for the new Stage API `id` here can be an intentionally
// meaningful string (like Check.id), whereas in the WorkNode API it's an
// assigned integer. We strongly want to keep 1:1 Stage:WorkNode mapping, so
// this compromise allows that with hopefully not-too-much complexity overhead
// for non-WorkNode stages.
message Stage {
  // The WorkPlan that this Stage belongs to.
  optional WorkPlan work_plan = 1;

  // An opaque identifier unique within this WorkPlan.
  //
  // For Android WorkNodes, this will be "N" followed by a decimal integer.
  // Otherwise this will start with "S" and have a suffix supplied by the
  // Stage which added this.
  //
  // If the type of this Stage is WorkNode, then this MAY start with "N"
  // followed by a decimal representation of an integer. If this is the case,
  // then this Stage has special handling in the graph service to keep it
  // synchronized with its identical twin in the WorkNodes table.
  //
  // Otherwise this MUST start with "S".
  optional string id = 3;
}

// Identifies a Stage Attempt within a Stage.
//
// Note that Stage.Attempt is embedded within a Stage, but we need a reference
// to it from various places (e.g. Check and Stage Edits), so it has an
// Identifier here. Most users will use Stage instead.
//
// Serialized as "<stage>:A<attempts_idx>".
//
// E.g. "<stage.work_plan.id>:<stage.id>:A<attempts_idx>"
message StageAttempt {
  // The Stage that this Stage Attempt belongs to.
  optional Stage stage = 1;

  // The 1-based index of this attempt within the Stage.attempts list.
  //
  // This is 1-based to distinguish it from 0/unset (which is invalid).
  optional int32 attempts_idx = 2;
}

// Identifies a Stage Edit within a WorkPlan.
//
// Serialized as "<stage>:E<version>".
//
// E.g.
// "<stage.work_plan.id>:<stage.id>:ET<version.ts.seconds>/<version.ts.nanos>"
message StageEdit {
  // The stage that this edit belongs to.
  optional Stage stage = 1;

  // The version of the Stage at the time this edit was made.
  optional google.protobuf.Timestamp version = 2;
}
