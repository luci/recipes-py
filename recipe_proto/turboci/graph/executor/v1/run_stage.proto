// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";

package turboci.graph.executor.v1;

import "turboci/graph/ids/v1/identifier.proto";
import "turboci/graph/orchestrator/v1/execution_policy.proto";
import "turboci/graph/orchestrator/v1/stage.proto";

option go_package = "go.chromium.org/turboci/proto/go/graph/executor/v1;executorpb";
option java_multiple_files = true;

// Request to run a stage attempt.
message RunStageRequest {
  // Stage to run.
  optional orchestrator.v1.Stage stage = 1;

  // Extra fields for validate_only mode.
  //
  // Make it empty for now for forward compatibility.
  message ValidateOnlyMode {}

  // Extra fields for run mode.
  message RunMode {
    // ID of the stage attempt to run.
    optional ids.v1.StageAttempt attempt = 1;
    // A token generated by the orchestrator.
    // The executor should pass this token to the stage for it to
    // perform updates to the workflow resources (checks and/or stages).
    optional string stage_attempt_token = 2;
  }

  // Mutually exclusive fields for each request mode.
  oneof mode {
    // If set, performs the preflight ACL checks and validations, but does not
    // actually run the stage.
    ValidateOnlyMode validate_only = 2;

    // If set, runs the stage attempt.
    RunMode run = 3;
  }
}

// Response to run a stage attempt.
message RunStageResponse {
  // Response of running an asynchronous stage.
  //
  // Make it empty for now for forward compatibility.
  message AsyncStage {}

  // Response of running a synchronous stage.
  //
  // Make it empty for now for forward compatibility.
  message SyncStage {}

  // Response of running a stage in validate_only mode.
  message ValidateOnly {
    // Validated execution policy for the stage.
    optional orchestrator.v1.ExecutionPolicy execution_policy = 1;
  }

  // Response to run a stage.
  oneof response {
    // Response of running an asynchronous stage.
    AsyncStage async_stage = 1;
    // Response of running a synchronous stage.
    SyncStage sync_stage = 2;
    // Response of running a stage in validate_only mode.
    ValidateOnly validate_only = 3;
  }
}
