// Copyright 2024 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.analysis.bq;

import "google/protobuf/timestamp.proto";
import "go.chromium.org/luci/analysis/proto/v1/sources.proto";
import "go.chromium.org/luci/common/bq/pb/options.proto";

option go_package = "go.chromium.org/luci/analysis/proto/bq;bqpb";

// Represents a grouped changepoint of a test variant on a source branch at a point in time.
message GroupedChangepointRow {
  // The LUCI Project. E.g. "chromium".
  string project = 1;

  // The identity of the test.
  string test_id = 2;

  // Hash of the variant, as 16 lowercase hexadecimal characters.
  // E.g. "96c68dc946ab4068".
  string variant_hash = 3;

  // Hash of the source branch, as 16 lowercase hexadecimal characters.
  string ref_hash = 4;

  // Describes one specific way of running the test, e.g. a specific bucket,
  // builder and a test suite.
  //
  // This will be encoded as a JSON object like
  // {"builder":"linux-rel","os":"Ubuntu-18.04",...}
  // to take advantage of BigQuery's JSON support, so that the query will only
  // be billed for the variant keys it reads.
  //
  // In the protocol buffer, it must be a string as per
  // https://cloud.google.com/bigquery/docs/write-api#data_type_conversions
  string variant = 5 [(bqschema.options).bq_type = "JSON"];

  // The branch in source control.
  luci.analysis.v1.SourceRef ref = 6;

  // Unexpected source verdict rate after this changepoint.
  double unexpected_source_verdict_rate = 7;

  // Unexpected source verdict rate of the segment before this changepoint.
  double previous_unexpected_source_verdict_rate = 8;

  // This nominal end position of the segment before this changepoint.
  int64 previous_nominal_end_position = 9;

  // The nominal start position of the segment after this changepoint.
  // In other words, the nominal position of this changepoint.
  int64 start_position = 10;

  // The lower bound of the changepoint position in a 99% two-tailed
  // confidence interval. Inclusive.
  int64 start_position_lower_bound_99th = 11;

  // The upper bound of the changepoint position in a 99% two-tailed
  // confidence interval. Inclusive.
  int64 start_position_upper_bound_99th = 12;

  // The nominal start hour of the segment after this changepoint.
  // In other words, the nominal hour of this changepoint.
  google.protobuf.Timestamp start_hour = 13;

  // start_hour_week is a timestamp representing the start of a week (Sunday at 00:00:00 AM UTC)
  // A week in this context refers to the period from Sunday 00:00:00 AM UTC (inclusive)
  // to the following Sunday 00:00:00 AM UTC (exclusive).
  google.protobuf.Timestamp start_hour_week = 14;

  // Ranking of the test ID within the LUCI project, sorted alphabetically by test ID.
  int64 test_id_num = 15;

  // Identifier of the changepoint group.
  // Rows belong to the same changepoint group if they have the same version and group_id.
  // This identifier is a concatenation of the lexicographically smallest
  // (project, test_id, variant_hash, ref_hash, start_position) tuple within this group.
  string group_id = 16;

  // Server timestamp for the version of grouping used.
  // All rows exported in the same task share the same version.
  // This field is used to identify the latest grouped changepoint rows.
  google.protobuf.Timestamp version = 17;
}
