// Copyright 2022 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package luci.analysis.v1;

import "go.chromium.org/luci/analysis/proto/v1/common.proto";

option go_package = "go.chromium.org/luci/analysis/proto/v1;analysispb";

// Represents a function Variant -> bool.
message VariantPredicate {
  oneof predicate {
    // A variant must be equal this definition exactly.
    Variant equals = 1;

    // A variant's key-value pairs must contain those in this one.
    Variant contains = 2;

    // A variant's hash must equal this value exactly.
    string hash_equals = 3;
  }
}

// Represents a function TestVerdict -> bool.
message TestVerdictPredicate {
  // Optional. The project-scoped realm to query the history from.
  // This is the realm without the "<project>:" prefix.
  //
  // When specified, only the test history entries found in the matching realm
  // will be returned.
  string sub_realm = 1;

  // Optional. The subset of test variants to request history for.
  VariantPredicate variant_predicate = 2;

  // Optional. Whether test verdicts generated by code with unsubmitted changes
  // (e.g. Gerrit changes) should be included in the response.
  //
  // If no filter is specified, all verdicts are returned (regardless of
  // submitted status).
  luci.analysis.v1.SubmittedFilter submitted_filter = 3;

  // Optional. Specify a range of timestamps to query the test history from.
  //
  // Test history older than the configured TTL (90 days) will not be returned.
  // When omitted, return all available test history.
  TimeRange partition_time_range = 4;

  // Optional. Whether to include the test results from LUCI Bisection.
  // Results from LUCI Bisection are only return if this is true.
  // LUCI Bisection results are excluded by default.
  bool include_bisection_results = 5;
}
